data <- prepareData(B.hat = B.hat,N = N,K = K,IDs = IDs)
fit.L <- HDP_Gibbs(data = data,Iter = 200,record = 100)
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )),pch=ifelse(colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])>0.95,4,19  ));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})))
}
k <- 1
simu.data$regenerate.paras$L.parameters[[k]]$clusters
clusters.true <- simu.data$regenerate.paras$L.parameters[[k]]$clusters
cluster.true <- sapply(unique(clusters.true), function(xxx){unique(IDs$SUB_PATHWAY)[clusters.true==xxx]})
cluster.true
source("R/utls.R")
cluster.est <- graphicalCluster(w = fit.L$L1$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L$L1$p.singleton)
??rowMeans
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
source("R/utls.R")
cluster.est <- graphicalCluster(w = fit.L$L1$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L$L1$p.singleton)
cluster.est
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est)
clusters.true
cluster.true
cluster.true <- sapply(unique(clusters.true), function(xxx){unique(IDs$SUB_PATHWAY)[clusters.true==xxx]})
cluster.est <- graphicalCluster(w = fit.L$L1$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L$L1$p.singleton)
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est)
coverageRate(clusters.true = clusters.true,clusters.result = clusters.true)
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est)
cluster.est
cluster.true
cluster.est <- graphicalCluster(w = fit.L$L1$W,method = "max",threshold = 0.5)
cluster.est
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est)
k <- 2
clusters.true <- simu.data$regenerate.paras$L.parameters[[k]]$clusters
cluster.true <- sapply(unique(clusters.true), function(xxx){unique(IDs$SUB_PATHWAY)[clusters.true==xxx]})
cluster.true
cluster.est <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
cluster.est
View(fit.L[[k]]$W)
cluster.est1 <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
greedyCluster <- function(w,method,threshold,include.singleton=F,p.singleton=NULL){
clusters <- list()
x <- w;r=nrow(x)
while (r>0) {
if(nrow(x)==1){
r <- 0
}else if(nrow(x)==2){
if(x[1,2]<=threshold){
clusters <- append(clusters,list(rownames(x)))
}else{
clusters <- append(clusters,list(rownames(x)[1]));clusters <- append(clusters,list(rownames(x)[2]))
}
r <- 0
}else{
cluster <- vector()
continue <- T
while(continue==T){
if(length(cluster)==0){
if(min( matrix.up(x) )<=threshold){
pairs <- which(x== min( matrix.up(x) ) , arr.ind = TRUE)
pairs <- pairs[pairs[,1]!=pairs[,2],]
init.pair <- pairs[1,]
cluster <- c(cluster ,rownames(x)[init.pair])
}else{
continue <- F
}
}else if(is.vector(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])){
if(method=="average"){
if(mean(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}else if(method=="min"){
if(min(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}else if(method=="max"){
if(max(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}
continue <- F
}else{
if(method=="average"){
indix <- which.min(rowMeans(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)]))
best.pathway <- names(indix)
distance <- rowMeans(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}else if(method=="min"){
indix <- which.min(apply(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)], 1, FUN = min))
best.pathway <- names(indix)
distance <- rowMins(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}else if(method=="max"){
indix <- which.min(apply(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)], 1, FUN = max))
best.pathway <- names(indix)
distance <- rowMaxs(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}
if(distance<=threshold){
cluster <- c(cluster,best.pathway)
}else{
continue <- F
}
}
}
pathway.to.remove <- which(rownames(x)%in% cluster)
x <- x[-pathway.to.remove,-pathway.to.remove]
r <- ifelse(is.matrix(x) ,nrow(x),0 )
if(length(cluster)>0){clusters <- append(clusters,list(cluster))}
}
}
if(include.singleton==T){
if(is.null(p.singleton)){
if(length(clusters)==0){
singletons <- rownames(w)
}else{
singletons <- rownames(w)[rowSums(sapply(clusters, function(cluster){rownames(w)%in%cluster}))==0]
}
}else{
if(length(clusters)==0){
singletons <- rownames(w)[1-p.singleton <= threshold]
}else{
singletons <- rownames(w)[rowSums(sapply(clusters, function(cluster){rownames(w)%in%cluster}))==0]
singletons <- singletons[singletons%in% rownames(w)[1-p.singleton <= threshold]]
}
}
if(length(singletons)>0){
for (singleton in singletons) {
clusters <- append(clusters,singleton)
}
}
}
return(clusters)
}
cluster.est2 <- greedyCluster(w = 1-fit.L[[k]]$W,method = "min",,threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
cluster.est2 <- greedyCluster(w = 1-fit.L[[k]]$W,method = "min",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
greedyCluster <- function(w,method,threshold,include.singleton=F,p.singleton=NULL){
clusters <- list()
x <- w;r=nrow(x)
while (r>0) {
if(nrow(x)==1){
r <- 0
}else if(nrow(x)==2){
if(x[1,2]<=threshold){
clusters <- append(clusters,list(rownames(x)))
}else{
clusters <- append(clusters,list(rownames(x)[1]));clusters <- append(clusters,list(rownames(x)[2]))
}
r <- 0
}else{
cluster <- vector()
continue <- T
while(continue==T){
if(length(cluster)==0){
if(min( matrix.up(x) )<=threshold){
pairs <- which(x== min( matrix.up(x) ) , arr.ind = TRUE)
pairs <- pairs[pairs[,1]!=pairs[,2],]
init.pair <- pairs[1,]
cluster <- c(cluster ,rownames(x)[init.pair])
}else{
continue <- F
}
}else if(is.vector(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])){
if(method=="average"){
if(mean(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}else if(method=="min"){
if(min(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}else if(method=="max"){
if(max(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}
continue <- F
}else{
if(method=="average"){
indix <- which.min(matrixStats::rowMeans(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)]))
best.pathway <- names(indix)
distance <- matrixStats::rowMeans(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}else if(method=="min"){
indix <- which.min(apply(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)], 1, FUN = min))
best.pathway <- names(indix)
distance <- matrixStats::rowMins(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}else if(method=="max"){
indix <- which.min(apply(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)], 1, FUN = max))
best.pathway <- names(indix)
distance <- matrixStats::rowMaxs(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}
if(distance<=threshold){
cluster <- c(cluster,best.pathway)
}else{
continue <- F
}
}
}
pathway.to.remove <- which(rownames(x)%in% cluster)
x <- x[-pathway.to.remove,-pathway.to.remove]
r <- ifelse(is.matrix(x) ,nrow(x),0 )
if(length(cluster)>0){clusters <- append(clusters,list(cluster))}
}
}
if(include.singleton==T){
if(is.null(p.singleton)){
if(length(clusters)==0){
singletons <- rownames(w)
}else{
singletons <- rownames(w)[rowSums(sapply(clusters, function(cluster){rownames(w)%in%cluster}))==0]
}
}else{
if(length(clusters)==0){
singletons <- rownames(w)[1-p.singleton <= threshold]
}else{
singletons <- rownames(w)[rowSums(sapply(clusters, function(cluster){rownames(w)%in%cluster}))==0]
singletons <- singletons[singletons%in% rownames(w)[1-p.singleton <= threshold]]
}
}
if(length(singletons)>0){
for (singleton in singletons) {
clusters <- append(clusters,singleton)
}
}
}
return(clusters)
}
cluster.est2 <- greedyCluster(w = 1-fit.L[[k]]$W,method = "min",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est2)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est2)
cluster.est2
cluster.est1 <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
cluster.est1
cluster.est2
cluster.true
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
source("R/utls.R")
cluster.est1 <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
cluster.est1
cluster.est2
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est1)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est1)
cluster.true
cluster.est1
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est1)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est1)
clusters.true
cluster.true <- simu.data$regenerate.paras$L.parameters[[k]]$clusters
cluster.true <- sapply(unique(clusters.true), function(xxx){unique(IDs$SUB_PATHWAY)[clusters.true==xxx]})
cluster.est1 <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est1)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est1)
coverageRate(clusters.true = cluster.true,clusters.result = cluster.est1)
inclusionRate(clusters.true = cluster.true,clusters.result = cluster.est1)
library(devtools)
install_github("WeiqiongHuang/HiGSS")
library(HiGSS)
N <- 1000;K <- 10
set.seed(3)
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian",common.spikes = c("1:1","1:2","1:3","1:4"))
B.hat <- simu.data$B.hat
#est.K <- dBEMA(Stand.B = B.hat,N = N)
data <- prepareData(B.hat = B.hat,N = N,K = K,IDs = IDs)
fit.L <- HDP_Gibbs(data = data,Iter = 200,record = 100)
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )),pch=ifelse(colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])>0.95,4,19  ));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})))
}
k <- 2
cluster.true <- simu.data$regenerate.paras$L.parameters[[k]]$clusters
cluster.true <- sapply(unique(clusters.true), function(xxx){unique(IDs$SUB_PATHWAY)[clusters.true==xxx]})
k <- 2
cluster.true <- simu.data$regenerate.paras$L.parameters[[k]]$clusters
cluster.true <- sapply(unique(cluster.true), function(xxx){unique(IDs$SUB_PATHWAY)[cluster.true==xxx]})
cluster.est1 <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
coverageRate(clusters.true = cluster.true,clusters.result = cluster.est1)
inclusionRate(clusters.true = cluster.true,clusters.result = cluster.est1)
？HDP_Gibbs
?HDP_Gibbs
?simuPathway
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian",fix.L.scaling = T,L.scaling = 0.1)
B.hat <- simu.data$B.hat
cate::est.factor.num(Y = t(B.hat),method = "ed",rmax = 20)
cate::est.factor.num(Y = t(B.hat),method = "bcv",rmax = 20)
simu.data$regenerate.paras$column.orders
#' @param p.out Probability of generating outliers.
#' @param common.spikes A vector of subpathway names. All entries of L belonging to those subpathway are set as 0. Default is NULL.
#' @param regenerate.paras A list containing parameters to regenerate L. Default is NULL.
#' @param fix.L.scaling Default is FALSE. The function will automatically scale L to make the signal strength compariable to noise level. If it's set as TRUE, 'L.scaling' must also be specified.
#' @param L.scaling User specificed scalar to scale L.
#' @param G.model Distribution of non-zero genetic effects. Can take values of either 'gaussian' or 'laplace'.
#' @param p.G.nonzero Probability of generating non-zero entries in G. Default is 0.005.
#' @param p.Delta.0 Probability of non-genetically regulated metabolites in Delta. Default is 0.2.
#' @return A list containg matrices in mtGWAS factor analysis model.
#' @export
simuFactorModel <- function(IDs=NULL,J=5,K=10,N=1000,S=1e4,G.model=c("gaussian","laplace"),p.l.spike=0.05,p.G.nonzero=0.005,p.out = 0.01,p.Delta.0=0.2,common.spikes = NULL,regenerate.L=FALSE,regenerate.paras = NULL,fix.L.scaling = FALSE, L.scaling = NULL){
if(is.null(IDs)){
#simulate J superpathways
IDs <- simuPathway(J)
}
m <- nrow(IDs)
#simulate L
if(regenerate.L==TRUE){
L <- matrix(data = NA,nrow = m,ncol = K)
for (k in 1:K) {
L[,k] <- rnorm(n = m,mean = regenerate.paras$L.parameters[[k]]$mu,regenerate.paras$L.parameters[[k]]$sd)
}
L <- L[,regenerate.paras$column.orders]
}else{
p.0 <- rbeta(n = K,shape1 = 2,shape2 = 1)
L <- matrix(data = NA,nrow = m,ncol = K)
L.parameters <- list()
for (k in 1:K){
simu.L <- rHDP(IDs = IDs,gamma = 4,alpha0 = 2,p.00 = 0.05,b.l = -6,b.u = 6,p.0 = p.0[k],p.out = p.out,tau = 10,sigma.alpha = 3,sigma.beta = 2,common.spikes = common.spikes)
L.parameters[[k]] <- simu.L
L[,k] <- simu.L$L
}
column.orders <- order(colSums(L^2),decreasing = T)
L <- L[,column.orders]
regenerate.paras <- list(L.parameters,column.orders);names(regenerate.paras) <- c("L.parameters","column.orders")
}
#simulate G
sigSNPs <- LaplacesDemon::rbern(n = S*K,prob = p.G.nonzero)
sigma.alt <- runif(n = K,min = 6,max = 9)
if(G.model=="gaussian"){
G <- matrix(data=ifelse(sigSNPs==1,rnorm(n = S*K,mean = 0,sd = sigma.alt[k]/sqrt(N)),0), nrow = S, ncol = K,byrow = T)
}else if(G.model=="laplace"){
G <- matrix(data=ifelse(sigSNPs==1,rlaplace(n = S*K,mu = 0,sigma = sigma.alt[k]/sqrt(2*N)),0), nrow = S, ncol = K,byrow = T)
}
X <- simuGenotype(N = N,S = S)$X
X <- X-rowMeans(X)%*%t(rep(1,N))
Dss = rowSums(X^2)
Xi <- matrix(data = rnorm(n = N*K,mean = 0,sd = 1),nrow = N,ncol = K)
C <- t(X)%*%G+Xi
#scale L
SigmaSquare <- rgamma(n = m,shape = 1,rate = 1)# mean = 1
E <- matrix(data = rnorm(n = N*m,mean = 0,sd = rep(sqrt(SigmaSquare),N)),nrow = m,ncol = N)
if(fix.L.scaling==FALSE){
scaling.para <- 1/sqrt(eigen(L%*%t(L))[[1]][K]*N/eigen(E%*%t(E))[[1]][1]/1.1)
L <- L*scaling.para
}else{
L <- L*L.scaling
}
#simulate Delta
Delta <- simuDelta(S = S,IDs = IDs,Dss = Dss,p0 =p.Delta.0,SigmaSquare = SigmaSquare,gamma = 5,alpha = 5)
#max(rowSums(Delta!=0))
#Y=LC+DeltaX+E
Y <- as.matrix(L%*%t(C))+Delta%*%X+E
#row-centering
Y <- Y-rowMeans(Y)%*%t(rep(1,N))
B.hat <- Y%*%t(X);B.hat <- sapply(1:S, function(s) B.hat[,s]/sqrt(Dss[s]))
result <- list(IDs,L,G,X,Xi,C,Delta,E,Y,B.hat,regenerate.paras,scaling.para);names(result) <- c("metabolites","L","G","X","Xi","C","Delta","E","Y","B.hat","regenerate.paras","scaling.para")
return(result)
}
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian",fix.L.scal)
simu.data$scaling.para
simu.1st <- simuFactorModel(IDs = IDs,G.model="gaussian",fix.L.scal)
simu.1st$scaling.para
simu.2rd <- simuFactorModel(IDs = IDs,G.model="gaussian",regenerate.L = TRUE,regenerate.paras = simu.1st$regenerate.paras,fix.L.scaling = T,L.scaling = simu.1st$scaling.para)
#' @param p.out Probability of generating outliers.
#' @param common.spikes A vector of subpathway names. All entries of L belonging to those subpathway are set as 0. Default is NULL.
#' @param regenerate.paras A list containing parameters to regenerate L. Default is NULL.
#' @param fix.L.scaling Default is FALSE. The function will automatically scale L to make the signal strength compariable to noise level. If it's set as TRUE, 'L.scaling' must also be specified.
#' @param L.scaling User specificed scalar to scale L.
#' @param G.model Distribution of non-zero genetic effects. Can take values of either 'gaussian' or 'laplace'.
#' @param p.G.nonzero Probability of generating non-zero entries in G. Default is 0.005.
#' @param p.Delta.0 Probability of non-genetically regulated metabolites in Delta. Default is 0.2.
#' @return A list containg matrices in mtGWAS factor analysis model.
#' @export
simuFactorModel <- function(IDs=NULL,J=5,K=10,N=1000,S=1e4,G.model=c("gaussian","laplace"),p.l.spike=0.05,p.G.nonzero=0.005,p.out = 0.01,p.Delta.0=0.2,common.spikes = NULL,regenerate.L=FALSE,regenerate.paras = NULL,fix.L.scaling = FALSE, L.scaling = NULL){
if(is.null(IDs)){
#simulate J superpathways
IDs <- simuPathway(J)
}
m <- nrow(IDs)
#simulate L
if(regenerate.L==TRUE){
L <- matrix(data = NA,nrow = m,ncol = K)
for (k in 1:K) {
L[,k] <- rnorm(n = m,mean = regenerate.paras$L.parameters[[k]]$mu,regenerate.paras$L.parameters[[k]]$sd)
}
L <- L[,regenerate.paras$column.orders]
}else{
p.0 <- rbeta(n = K,shape1 = 2,shape2 = 1)
L <- matrix(data = NA,nrow = m,ncol = K)
L.parameters <- list()
for (k in 1:K){
simu.L <- rHDP(IDs = IDs,gamma = 4,alpha0 = 2,p.00 = 0.05,b.l = -6,b.u = 6,p.0 = p.0[k],p.out = p.out,tau = 10,sigma.alpha = 3,sigma.beta = 2,common.spikes = common.spikes)
L.parameters[[k]] <- simu.L
L[,k] <- simu.L$L
}
column.orders <- order(colSums(L^2),decreasing = T)
L <- L[,column.orders]
regenerate.paras <- list(L.parameters,column.orders);names(regenerate.paras) <- c("L.parameters","column.orders")
}
#simulate G
sigSNPs <- LaplacesDemon::rbern(n = S*K,prob = p.G.nonzero)
sigma.alt <- runif(n = K,min = 6,max = 9)
if(G.model=="gaussian"){
G <- matrix(data=ifelse(sigSNPs==1,rnorm(n = S*K,mean = 0,sd = sigma.alt[k]/sqrt(N)),0), nrow = S, ncol = K,byrow = T)
}else if(G.model=="laplace"){
G <- matrix(data=ifelse(sigSNPs==1,rlaplace(n = S*K,mu = 0,sigma = sigma.alt[k]/sqrt(2*N)),0), nrow = S, ncol = K,byrow = T)
}
X <- simuGenotype(N = N,S = S)$X
X <- X-rowMeans(X)%*%t(rep(1,N))
Dss = rowSums(X^2)
Xi <- matrix(data = rnorm(n = N*K,mean = 0,sd = 1),nrow = N,ncol = K)
C <- t(X)%*%G+Xi
#scale L
SigmaSquare <- rgamma(n = m,shape = 1,rate = 1)# mean = 1
E <- matrix(data = rnorm(n = N*m,mean = 0,sd = rep(sqrt(SigmaSquare),N)),nrow = m,ncol = N)
if(fix.L.scaling==FALSE){
scaling.para <- 1/sqrt(eigen(L%*%t(L))[[1]][K]*N/eigen(E%*%t(E))[[1]][1]/1.1)
L <- L*scaling.para
}else{
scaling.para <- L.scaling
L <- L*scaling.para
}
#simulate Delta
Delta <- simuDelta(S = S,IDs = IDs,Dss = Dss,p0 =p.Delta.0,SigmaSquare = SigmaSquare,gamma = 5,alpha = 5)
#max(rowSums(Delta!=0))
#Y=LC+DeltaX+E
Y <- as.matrix(L%*%t(C))+Delta%*%X+E
#row-centering
Y <- Y-rowMeans(Y)%*%t(rep(1,N))
B.hat <- Y%*%t(X);B.hat <- sapply(1:S, function(s) B.hat[,s]/sqrt(Dss[s]))
result <- list(IDs,L,G,X,Xi,C,Delta,E,Y,B.hat,regenerate.paras,scaling.para);names(result) <- c("metabolites","L","G","X","Xi","C","Delta","E","Y","B.hat","regenerate.paras","scaling.para")
return(result)
}
simu.2rd <- simuFactorModel(IDs = IDs,G.model="gaussian",regenerate.L = TRUE,regenerate.paras = simu.1st$regenerate.paras,fix.L.scaling = T,L.scaling = simu.1st$scaling.para)
B.hat <- simu.2rd$B.hat
cate::est.factor.num(Y = t(B.hat),method = "ed",rmax = 20)
install_github("ZhengTracyKe/BEMA")
install_github("ZhengTracyKe/BEMA")
?mvrnorm
?colMeans
?optimize
load_all()
rm(list = c("simuFactorModel"))
load_all()
load_all()
nrow(B.hat)
ncol(B.hat)
N <- 1000;K <- 10
set.seed(3)
IDs <- simuPathway(J = 5)
simu.1st <- simuFactorModel(IDs = IDs,G.model="gaussian",fix.L.scal)
simu.2rd <- simuFactorModel(IDs = IDs,G.model="gaussian",regenerate.L = TRUE,regenerate.paras = simu.1st$regenerate.paras,fix.L.scaling = T,L.scaling = simu.1st$scaling.para)
B.hat <- simu.2rd$B.hat
#PANICr
B.hat.xts <- xts(x = B.hat,order.by = as.Date(c(1:nrow(B.hat))))
library(xts)
#PANICr
B.hat.xts <- xts(x = B.hat,order.by = as.Date(c(1:nrow(B.hat))))
#regenerate data with the same subpathway parameters to test different methods
for (i in 1:5) {
simu.2rd <- simuFactorModel(IDs = IDs,G.model="gaussian",regenerate.L = TRUE,regenerate.paras = simu.1st$regenerate.paras,fix.L.scaling = T,L.scaling = simu.1st$scaling.para)
B.hat <- simu.2rd$B.hat
#ED
ED.est <- cate::est.factor.num(Y = t(B.hat),method = "ed",rmax = 20);EDestimates[i] <- ED.est
#BCV
BCV.est <- cate::est.factor.num(Y = t(B.hat),method = "bcv",rmax = 20);BCVestimates[i] <- BCV.est$r
#PANICr
B.hat.xts <- xts(x = B.hat,order.by = as.Date(c(1:nrow(B.hat))))
PANICr.est <- getnfac(x = B.hat.xts,kmax = 20,criteria = "IC1");PANICrestimates[i] <- as.numeric(PANICr.est$ic)
#PA
PAestimates[i] <- num.sv(dat = B.hat,mod = rep(1,S),method = "be")
#dEBMA
dEBMA.est <- dBEMA(Stand.B = B.hat,N = N);dBEMAestimates[i] <- dEBMA.est$nFactors
#BEMA
EBMA.est <- BEMA(data = t(B.hat),n = ncol(B.hat),p = nrow(B.hat),alpha = 0.1);BEMAestimates[i] <- EBMA.est
}
dBEMAestimates <- vector();EDestimates <- vector();PAestimates <- vector();PANICrestimates <- vector();BEMAestimates <- vector();BCVestimates <- vector()
#regenerate data with the same subpathway parameters to test different methods
for (i in 1:5) {
simu.2rd <- simuFactorModel(IDs = IDs,G.model="gaussian",regenerate.L = TRUE,regenerate.paras = simu.1st$regenerate.paras,fix.L.scaling = T,L.scaling = simu.1st$scaling.para)
B.hat <- simu.2rd$B.hat
#ED
ED.est <- cate::est.factor.num(Y = t(B.hat),method = "ed",rmax = 20);EDestimates[i] <- ED.est
#BCV
BCV.est <- cate::est.factor.num(Y = t(B.hat),method = "bcv",rmax = 20);BCVestimates[i] <- BCV.est$r
#PANICr
B.hat.xts <- xts(x = B.hat,order.by = as.Date(c(1:nrow(B.hat))))
PANICr.est <- getnfac(x = B.hat.xts,kmax = 20,criteria = "IC1");PANICrestimates[i] <- as.numeric(PANICr.est$ic)
#PA
PAestimates[i] <- num.sv(dat = B.hat,mod = rep(1,S),method = "be")
#dEBMA
dEBMA.est <- dBEMA(Stand.B = B.hat,N = N);dBEMAestimates[i] <- dEBMA.est$nFactors
#BEMA
EBMA.est <- BEMA(data = t(B.hat),n = ncol(B.hat),p = nrow(B.hat),alpha = 0.1);BEMAestimates[i] <- EBMA.est
}
?getnfac
??getnfac
library(PANICr)
B.hat.xts <- xts(x = B.hat,order.by = as.Date(c(1:nrow(B.hat))))
PANICr.est <- getnfac(x = B.hat.xts,kmax = 20,criteria = "IC1");PANICrestimates[i] <- as.numeric(PANICr.est$ic)
PANICrestimates
#PA
PAestimates[i] <- num.sv(dat = B.hat,mod = rep(1,S),method = "be")
??num.sv
library(sva)
#PA
PAestimates[i] <- num.sv(dat = B.hat,mod = rep(1,S),method = "be")
#PA
PAestimates[i] <- num.sv(dat = B.hat,mod = rep(1,ncol(B.hat)),method = "be")
#dEBMA
dEBMA.est <- dBEMA(Stand.B = B.hat,N = N);dBEMAestimates[i] <- dEBMA.est$nFactors
