# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
N <- 1000
set.seed(3)
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian")
B.hat <- simu.data$B.hat
data <- prepareData(B.hat = B.hat,N = N,K = 10,IDs = IDs)
length(unique(IDs$SUB_PATHWAY))
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
N <- 1000
set.seed(3)
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian")
B.hat <- simu.data$B.hat
#est.K <- dBEMA(Stand.B = B.hat,N = N)
data <- prepareData(B.hat = B.hat,N = N,K = 10,IDs = IDs)
fit.L <- HDP_Gibbs(data = data,Iter = 200,record = 100)
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
fit.L <- HDP_Gibbs(data = data,Iter = 200,record = 100)
colMeans(fit.L[[1]]$Mean)
N <- 1000;K <- 10
for (k in 1:K) {
plot(data$L[,k])
}
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )))
}
unique(IDs$SUB_PATHWAY)
fit.L[[1]]$Mean[,"1:1"]
fit.L[[1]]$Mean
fit.L[[1]]$Mean[,"1:1"]
fit.L[[1]]$Mean[,"1:2"]
fit.L[[1]]$Mean[,"1:2"]
fit.L[[1]]$Mean[,"1:3"]
fit.L[[1]]$Mean[,"1:4"]
fit.L[[1]]$Mean[,"1:5"]
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )))
sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(  )})
}
fit.L[[1]]$Mean[,"1:5"]
fit.L[[1]]$Mean[,"2:1"]
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )))
sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(  )})
}
fit.L[[1]]$Mean[,"1:2"]
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )))
sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(  )})
}
colMeans(fit.L[[1]]$Mean)
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
N <- 1000;K <- 10
set.seed(3)
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian")
B.hat <- simu.data$B.hat
#est.K <- dBEMA(Stand.B = B.hat,N = N)
data <- prepareData(B.hat = B.hat,N = N,K = K,IDs = IDs)
fit.L <- HDP_Gibbs(data = data,Iter = 200,record = 100)
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
fit.L <- HDP_Gibbs(data = data,Iter = 200,record = 100)
fit.L[[1]]$Mean[,"1:2"]
fit.L[[1]]$Mean[,"2:1"]
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )))
sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(  )})
}
fit.L[[1]]$Mean[,"1:1"]
fit.L[[1]]$Mean[,"1:1"]
sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[1]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[1]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})),tyle="l")
}
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})),tyle="l")
}
colnames(fit.L[[k]]$Outlier)
fit.L[[k]]$Outlier[,IDs$metabolite]
colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )),pch=ifelse(colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])>0.95,4,19  ));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})),tyle="l")
}
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
N <- 1000;K <- 10
set.seed(3)
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian")
B.hat <- simu.data$B.hat
#est.K <- dBEMA(Stand.B = B.hat,N = N)
data <- prepareData(B.hat = B.hat,N = N,K = K,IDs = IDs)
fit.L <- HDP_Gibbs(data = data,Iter = 200,record = 100)
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )),pch=ifelse(colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])>0.95,4,19  ));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})),tyle="l")
}
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )),pch=ifelse(colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])>0.5,4,19  ));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})),tyle="l")
}
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )),pch=ifelse(colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])>0.95,4,19  ));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})),tyle="l")
}
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )),pch=ifelse(colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])>0.95,4,19  ));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})))
}
install.packages(c("BH", "boot", "bzinb", "callr", "coda", "commonmark", "cowplot", "curl", "data.table", "DBI", "digest", "expm", "gdtools", "ggfun", "ggplot2", "ggrepel", "glue", "hrbrthemes", "httpuv", "igraph", "locfit", "MASS", "Matrix", "matrixStats", "mclust", "MCMCpack", "mrfDepth", "multicool", "patchwork", "pkgload", "plyr", "ps", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "rgl", "rlang", "rmarkdown", "robustbase", "rrcov", "rrcovHD", "RSQLite", "sp", "stringi", "survival", "svd", "systemfonts", "tidyr", "usethis", "viridis", "withr", "xfun", "XML", "xts", "yaml", "yulab.utils", "zip"))
install.packages(c("BH", "boot", "bzinb", "callr", "coda", "commonmark", "cowplot", "curl", "data.table", "DBI", "digest", "expm", "gdtools", "ggfun", "ggplot2", "ggrepel", "glue", "hrbrthemes", "httpuv", "igraph", "locfit", "MASS", "Matrix", "matrixStats", "mclust", "MCMCpack", "mrfDepth", "multicool", "patchwork", "pkgload", "plyr", "ps", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "rgl", "rlang", "rmarkdown", "robustbase", "rrcov", "rrcovHD", "RSQLite", "sp", "stringi", "survival", "svd", "systemfonts", "tidyr", "usethis", "viridis", "withr", "xfun", "XML", "xts", "yaml", "yulab.utils", "zip"))
install.packages(c("BH", "boot", "bzinb", "callr", "coda", "commonmark", "cowplot", "curl", "data.table", "DBI", "digest", "expm", "gdtools", "ggfun", "ggplot2", "ggrepel", "glue", "hrbrthemes", "httpuv", "igraph", "locfit", "MASS", "Matrix", "matrixStats", "mclust", "MCMCpack", "mrfDepth", "multicool", "patchwork", "pkgload", "plyr", "ps", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "rgl", "rlang", "rmarkdown", "robustbase", "rrcov", "rrcovHD", "RSQLite", "sp", "stringi", "survival", "svd", "systemfonts", "tidyr", "usethis", "viridis", "withr", "xfun", "XML", "xts", "yaml", "yulab.utils", "zip"))
install.packages("roxygen2")
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
N <- 1000;K <- 10
set.seed(3)
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian")
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian")
simu.data$regenerate.paras$L.parameters
simu.data$regenerate.paras$L.parameters[[1]]
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian")
simu.data$regenerate.paras$L.parameters[[1]]$clusters
common.spieks <- c("1:1","1:2")
IDs$SUB_PATHWAY%in%common.spieks
"1:1"%in%NULL
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
N <- 1000;K <- 10
set.seed(3)
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian",common.spieks = c("1:1","1:2","1:3","1:4"))
B.hat <- simu.data$B.hat
#est.K <- dBEMA(Stand.B = B.hat,N = N)
data <- prepareData(B.hat = B.hat,N = N,K = K,IDs = IDs)
fit.L <- HDP_Gibbs(data = data,Iter = 200,record = 100)
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )),pch=ifelse(colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])>0.95,4,19  ));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})))
}
simu.data$regenerate.paras$L.parameters[[1]]$clusters
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
N <- 1000;K <- 10
set.seed(3)
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian",common.spieks = c("1:1","1:2","1:3","1:4"))
N <- 1000;K <- 10
set.seed(3)
IDs <- simuPathway(J = 5)
simu.data <- simuFactorModel(IDs = IDs,G.model="gaussian",common.spikes = c("1:1","1:2","1:3","1:4"))
B.hat <- simu.data$B.hat
#est.K <- dBEMA(Stand.B = B.hat,N = N)
data <- prepareData(B.hat = B.hat,N = N,K = K,IDs = IDs)
fit.L <- HDP_Gibbs(data = data,Iter = 200,record = 100)
for (k in 1:K) {
plot(data$L[,k],col=match(IDs$SUB_PATHWAY,cbind(unique(IDs$SUB_PATHWAY), c(1:length(unique(IDs$SUB_PATHWAY))) )),pch=ifelse(colMeans(fit.L[[k]]$Outlier[,IDs$metabolite])>0.95,4,19  ));lines(unlist(sapply(unique(IDs$SUB_PATHWAY), function(xxx){rep(mean(fit.L[[k]]$Mean[,xxx]), sum(IDs$SUB_PATHWAY==xxx)  )})))
}
k <- 1
simu.data$regenerate.paras$L.parameters[[k]]$clusters
clusters.true <- simu.data$regenerate.paras$L.parameters[[k]]$clusters
cluster.true <- sapply(unique(clusters.true), function(xxx){unique(IDs$SUB_PATHWAY)[clusters.true==xxx]})
cluster.true
source("R/utls.R")
cluster.est <- graphicalCluster(w = fit.L$L1$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L$L1$p.singleton)
??rowMeans
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
source("R/utls.R")
cluster.est <- graphicalCluster(w = fit.L$L1$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L$L1$p.singleton)
cluster.est
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est)
clusters.true
cluster.true
cluster.true <- sapply(unique(clusters.true), function(xxx){unique(IDs$SUB_PATHWAY)[clusters.true==xxx]})
cluster.est <- graphicalCluster(w = fit.L$L1$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L$L1$p.singleton)
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est)
coverageRate(clusters.true = clusters.true,clusters.result = clusters.true)
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est)
cluster.est
cluster.true
cluster.est <- graphicalCluster(w = fit.L$L1$W,method = "max",threshold = 0.5)
cluster.est
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est)
k <- 2
clusters.true <- simu.data$regenerate.paras$L.parameters[[k]]$clusters
cluster.true <- sapply(unique(clusters.true), function(xxx){unique(IDs$SUB_PATHWAY)[clusters.true==xxx]})
cluster.true
cluster.est <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
cluster.est
View(fit.L[[k]]$W)
cluster.est1 <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
greedyCluster <- function(w,method,threshold,include.singleton=F,p.singleton=NULL){
clusters <- list()
x <- w;r=nrow(x)
while (r>0) {
if(nrow(x)==1){
r <- 0
}else if(nrow(x)==2){
if(x[1,2]<=threshold){
clusters <- append(clusters,list(rownames(x)))
}else{
clusters <- append(clusters,list(rownames(x)[1]));clusters <- append(clusters,list(rownames(x)[2]))
}
r <- 0
}else{
cluster <- vector()
continue <- T
while(continue==T){
if(length(cluster)==0){
if(min( matrix.up(x) )<=threshold){
pairs <- which(x== min( matrix.up(x) ) , arr.ind = TRUE)
pairs <- pairs[pairs[,1]!=pairs[,2],]
init.pair <- pairs[1,]
cluster <- c(cluster ,rownames(x)[init.pair])
}else{
continue <- F
}
}else if(is.vector(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])){
if(method=="average"){
if(mean(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}else if(method=="min"){
if(min(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}else if(method=="max"){
if(max(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}
continue <- F
}else{
if(method=="average"){
indix <- which.min(rowMeans(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)]))
best.pathway <- names(indix)
distance <- rowMeans(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}else if(method=="min"){
indix <- which.min(apply(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)], 1, FUN = min))
best.pathway <- names(indix)
distance <- rowMins(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}else if(method=="max"){
indix <- which.min(apply(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)], 1, FUN = max))
best.pathway <- names(indix)
distance <- rowMaxs(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}
if(distance<=threshold){
cluster <- c(cluster,best.pathway)
}else{
continue <- F
}
}
}
pathway.to.remove <- which(rownames(x)%in% cluster)
x <- x[-pathway.to.remove,-pathway.to.remove]
r <- ifelse(is.matrix(x) ,nrow(x),0 )
if(length(cluster)>0){clusters <- append(clusters,list(cluster))}
}
}
if(include.singleton==T){
if(is.null(p.singleton)){
if(length(clusters)==0){
singletons <- rownames(w)
}else{
singletons <- rownames(w)[rowSums(sapply(clusters, function(cluster){rownames(w)%in%cluster}))==0]
}
}else{
if(length(clusters)==0){
singletons <- rownames(w)[1-p.singleton <= threshold]
}else{
singletons <- rownames(w)[rowSums(sapply(clusters, function(cluster){rownames(w)%in%cluster}))==0]
singletons <- singletons[singletons%in% rownames(w)[1-p.singleton <= threshold]]
}
}
if(length(singletons)>0){
for (singleton in singletons) {
clusters <- append(clusters,singleton)
}
}
}
return(clusters)
}
cluster.est2 <- greedyCluster(w = 1-fit.L[[k]]$W,method = "min",,threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
cluster.est2 <- greedyCluster(w = 1-fit.L[[k]]$W,method = "min",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
greedyCluster <- function(w,method,threshold,include.singleton=F,p.singleton=NULL){
clusters <- list()
x <- w;r=nrow(x)
while (r>0) {
if(nrow(x)==1){
r <- 0
}else if(nrow(x)==2){
if(x[1,2]<=threshold){
clusters <- append(clusters,list(rownames(x)))
}else{
clusters <- append(clusters,list(rownames(x)[1]));clusters <- append(clusters,list(rownames(x)[2]))
}
r <- 0
}else{
cluster <- vector()
continue <- T
while(continue==T){
if(length(cluster)==0){
if(min( matrix.up(x) )<=threshold){
pairs <- which(x== min( matrix.up(x) ) , arr.ind = TRUE)
pairs <- pairs[pairs[,1]!=pairs[,2],]
init.pair <- pairs[1,]
cluster <- c(cluster ,rownames(x)[init.pair])
}else{
continue <- F
}
}else if(is.vector(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])){
if(method=="average"){
if(mean(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}else if(method=="min"){
if(min(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}else if(method=="max"){
if(max(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])<threshold){cluster <- rownames(x)}
}
continue <- F
}else{
if(method=="average"){
indix <- which.min(matrixStats::rowMeans(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)]))
best.pathway <- names(indix)
distance <- matrixStats::rowMeans(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}else if(method=="min"){
indix <- which.min(apply(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)], 1, FUN = min))
best.pathway <- names(indix)
distance <- matrixStats::rowMins(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}else if(method=="max"){
indix <- which.min(apply(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)], 1, FUN = max))
best.pathway <- names(indix)
distance <- matrixStats::rowMaxs(x[-which(rownames(x)%in%cluster),which(rownames(x)%in%cluster)])[indix]
}
if(distance<=threshold){
cluster <- c(cluster,best.pathway)
}else{
continue <- F
}
}
}
pathway.to.remove <- which(rownames(x)%in% cluster)
x <- x[-pathway.to.remove,-pathway.to.remove]
r <- ifelse(is.matrix(x) ,nrow(x),0 )
if(length(cluster)>0){clusters <- append(clusters,list(cluster))}
}
}
if(include.singleton==T){
if(is.null(p.singleton)){
if(length(clusters)==0){
singletons <- rownames(w)
}else{
singletons <- rownames(w)[rowSums(sapply(clusters, function(cluster){rownames(w)%in%cluster}))==0]
}
}else{
if(length(clusters)==0){
singletons <- rownames(w)[1-p.singleton <= threshold]
}else{
singletons <- rownames(w)[rowSums(sapply(clusters, function(cluster){rownames(w)%in%cluster}))==0]
singletons <- singletons[singletons%in% rownames(w)[1-p.singleton <= threshold]]
}
}
if(length(singletons)>0){
for (singleton in singletons) {
clusters <- append(clusters,singleton)
}
}
}
return(clusters)
}
cluster.est2 <- greedyCluster(w = 1-fit.L[[k]]$W,method = "min",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est2)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est2)
cluster.est2
cluster.est1 <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
cluster.est1
cluster.est2
cluster.true
# library(copula)
# library(invgamma)
# library(LaplacesDemon)
# library(matrixStats)
# library(RMTstat)
# library(stats)
source("R/simulation.R")
source("R/dBEMA.R")
source("R/Gibbs_functions.R")
source("R/Gibbs_sampler.R")
source("R/utls.R")
cluster.est1 <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
cluster.est1
cluster.est2
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est1)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est1)
cluster.true
cluster.est1
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est1)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est1)
clusters.true
cluster.true <- simu.data$regenerate.paras$L.parameters[[k]]$clusters
cluster.true <- sapply(unique(clusters.true), function(xxx){unique(IDs$SUB_PATHWAY)[clusters.true==xxx]})
cluster.est1 <- graphicalCluster(w = fit.L[[k]]$W,method = "max",threshold = 0.5,include.singleton = T,p.singleton = fit.L[[k]]$p.singleton)
coverageRate(clusters.true = clusters.true,clusters.result = cluster.est1)
inclusionRate(clusters.true = clusters.true,clusters.result = cluster.est1)
coverageRate(clusters.true = cluster.true,clusters.result = cluster.est1)
inclusionRate(clusters.true = cluster.true,clusters.result = cluster.est1)
